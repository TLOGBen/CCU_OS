
var React = require('react');
var _ = require('lodash');
var cx = require('classnames');

/**
 *	MENUS
 *		http://www.getmdl.io/components/index.html#menus-section
 *	Props
 *		children: isRequired, the content of the tabs
 *		tabLabels: isRequired, Array of Element, its length should equal to the number of children.
 *		isRipple: Whether applies ripple click effect to tabï¼ŒDefault true
 *		style: Object, Entire tabs CSS style
 *		defaultIndex: default displayed tab's index,
 *	State
 *		tabIndex
 *	Event
 *		onChange: if tab is clicked, this event will be trigger.
 *	Method
 *		setTabIndex: change to another tab
 *		getTabLabel: get the label of currently active tab
 *		getTabIndex: get the index of currently active tab
 */

var _counter = 1;

module.exports = React.createClass({

	displayName : 'MDL:Tabs',

	propTypes: {
		tabLabels: React.PropTypes.arrayOf(
			React.PropTypes.oneOfType([
				React.PropTypes.string,
				React.PropTypes.element,
			])).isRequired,
		children: React.PropTypes.arrayOf(React.PropTypes.element),
		isRipple: React.PropTypes.bool,
		style: React.PropTypes.object,
		defaultIndex: React.PropTypes.number,
		onChange: React.PropTypes.func,
		justify : React.PropTypes.oneOf([
			'left', 'center', 'right'
		]),
	},

	getDefaultProps: function() {
		return {
			isRipple: true,
			style: {},
			defaultIndex: 0,
		};
	},

	getInitialState: function() {
		return {
			tabIndex: this.props.defaultIndex >= this.props.tabLabels.length ? 0 : this.props.defaultIndex,
		};
	},

	componentWillMount: function() {
		if(this.props.children instanceof Array) {
			if (!this.props.tabLabels instanceof Array || this.props.tabLabels.length == 1){
				console.warn("MDL.Tab: The props `tabLabels` should be an array that contains at least two item");
			}
			if (this.props.tabLabels.length !== this.props.children.length) {
				console.warn("MDL.Tab: The number of `tabLabels` should be same as props `children`");
			}
		}
		this.state.id = 'mdl-tab-' + _counter++ + '-';
	},

	componentDidMount: function() {
		componentHandler.upgradeDom();
	},

	setTabIndex: function(index, e) {
		// if(
		// 	index == this.state.tabIndex ||
		// 	index >= this.props.children.length
		// ) {
		// 	return;
		// }
		this.setState({tabIndex: index}, function() {
			if(_.isFunction(this.props.onChange)) {
				this.props.onChange(index);
			}
		});
	},

	getTabLabel: function() {
		return this.props.tabLabels[this.state.tabIndex];
	},

	getTabIndex: function() {
		return this.state.tabIndex;
	},

	render: function() {

		var tabBars = [];
		var tabPanels = [];
		this.props.tabLabels.map(function(label, index){
			var id = this.state.id + label.split(' ').join('') + '-' + index;
			tabBars.push(
				<a key={label}
					href={'#' + id}
					className={"mdl-tabs__tab " + (index == this.state.tabIndex? 'is-active':'')}
					onClick={this.setTabIndex.bind(this, index)}
				>
					{label}
				</a>
			);
			tabPanels.push(
				<div key={label}
					id={id}
					className={"mdl-tabs__panel " + (index == this.state.tabIndex? 'is-active':'')}
				>
					{
						_.isArray(this.props.children) && this.props.children[index]
						? this.props.children[index]
						: null
					}
				</div>
			);
		}.bind(this));

		var containerClasses = {
			'mdl-tabs' : true,
			'mdl-js-tabs' : true,
			'mdl-js-ripple-effect' : this.props.isRipple,
		};
		containerClasses = cx(containerClasses);

		var tabBarStyle = null;
		if(this.props.justify == 'left') {
			tabBarStyle = {
				justifyContent : 'flex-start',
				WebkitJustifyContent : 'flex-start',
			};
		} else if(this.props.justify == 'right') {
			tabBarStyle = {
				justifyContent : 'flex-end',
				WebkitJustifyContent : 'flex-end',
			};
		}

		return (
			<div
				className={containerClasses}
				style={this.props.style}
			>
				<div
					className="mdl-tabs__tab-bar"
					style={tabBarStyle}
				>
					{tabBars}
				</div>
				{tabPanels}
			</div>
		);

	},

});
