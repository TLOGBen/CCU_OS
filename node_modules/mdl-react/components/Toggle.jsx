
var React = require('react');
var cx = require('classnames');
var _ = require('lodash');


/**
 *	Toggle
 *		http://www.getmdl.io/components/index.html#toggles-section
 *	Props
 *		text: 字串, element 或 icon
 *		type: 'checkbox', 'radio', 'icon-toggle', 'switch'
 *		name: html element, mainly for the binding of Radio Buttons
 *		value: html element, the value of the input
 *		isRipple: 是否帶特效, 預設 true
 *		isDisabled: 是否禁用Toggle
 *		isChecked: 預設勾選
 *		style: Toggle CSS 樣式
 *		onChange: onchange event
 *	Methods
 *		toggle: toggle checkbox
 *		setChecked: set checkbox checked or unchecked
 *		getChecked: whether the checkbox is checked
 */

var counter = 1;

module.exports = React.createClass({

	displayName : 'MDL:Toggle',

	getDefaultProps: function() {
		return {
			text: '',
			isRipple: true,
			style: {},
			isChecked: false,
			isDisabled: false,
		};
	},

	propTypes: {
		text: React.PropTypes.node,
		type: React.PropTypes.oneOf([
			'checkbox',
			'radio',
			'icon-toggle',
			'switch'
		]).isRequired,
		name: function(props, propName, componentName) {
			if(
				props.type == 'radio' &&
				!props.name
			) {
				return new Error('`name` is needed when `type` is `radio`');
			}
		},
		value: function(props, propName, componentName) {
			if(
				props.type == 'radio' &&
				!props.value
			) {
				return new Error('`value` is needed when `type` is `radio`');
			}
		},
		isRipple: React.PropTypes.bool,
		style: React.PropTypes.object,
		isChecked: React.PropTypes.bool,
		onChange:  React.PropTypes.func,
		isDisabled: React.PropTypes.bool,
	},

	id : 'mdl-toggle-',

	componentWillMount: function() {
		this.id = this.id + counter++;
	},

	componentDidMount: function() {
		componentHandler.upgradeDom();
	},

	toggle: function() {
		return this.setChecked(!React.findDOMNode(this.refs.input).checked);
	},

	setChecked: function(isChecked) {
		var inputNode = React.findDOMNode(this.refs.input);
		if (inputNode.checked !== isChecked) {
			inputNode.checked = isChecked;

			var labelNode = React.findDOMNode(this.refs.label);
			isChecked ?
				labelNode.className += ' is-checked' :
				labelNode.className = labelNode.className.replace(' is-checked','');
		}
		return inputNode.checked;
	},

	getChecked: function() {
		return React.findDOMNode(this.refs.input).checked;
	},

	_onChange : function() {
		if(this.props.onChange instanceof Function) {
			this.props.onChange(this.getChecked());
		}
	},

	_getClasses: function() {
		var classes = {
			text: {},
		};
		classes.text['mdl-' + this.props.type + '__label'] = true;
		return classes;
	},

	render: function() {

		var labelClasses = {
			'mdl-js-ripple-effect': this.props.isRipple,
		};
		labelClasses['mdl-' + this.props.type] = true;
		labelClasses['mdl-js-' + this.props.type] = true;

		var inputType = this.props.type == 'radio' ? 'radio' : 'checkbox';
		var inputClassName = this.props.type == 'radio'
			? 'mdl-radio__button'
			: 'mdl-' + this.props.type + '__input';

		return (
			<label ref="label"
				style={this.props.style}
				className={cx(labelClasses)}
				htmlFor={this.id}
			>
				<input ref="input"
					type={inputType}
					id={this.id}
					className={inputClassName}
					name={this.props.name}
					value={this.props.value}
					defaultChecked={this.props.isChecked}
					disabled={this.props.isDisabled}
					onChange={this._onChange}
				/>
				<ToggleText
					type={this.props.type}
					text={this.props.text}
				></ToggleText>
			</label>
		);
	},

});


var ToggleText = React.createClass({
	displayName : 'MDL:Toggle:_Text',
	render: function() {
		if(this.props.type == 'icon-toggle') {
			return <i className="mdl-icon-toggle__label material-icons">
				{this.props.text}
			</i>;
		} else {
			return <span className={'mdl-' + this.props.type + '__label'}>
				{this.props.text}
			</span>
		}
	},
});
